
if (Boolean.valueOf(rootProject.ext.moduleMain)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'

}


//版本信息配置
def config = rootProject.ext.android
//依赖信息配置
def librarys = rootProject.ext.dependencies

android {

    compileSdkVersion config.compileSdkVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        //MultiDex分包方法
        multiDexEnabled true

        //强制前缀
        resourcePrefix "appmain_"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }

    }


    /*java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除。*/
    sourceSets {
        main {
            if (rootProject.ext.moduleMain) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*debug'
                }
            }

        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //防止编译的时候oom、GC
    dexOptions {
        javaMaxHeapSize "4g"
    }

    //解决.9图问题
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':commonlibrary')
    annotationProcessor librarys.arouterProcessor
    implementation  librarys.bannerView
}
